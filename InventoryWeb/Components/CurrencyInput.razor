@using System.Globalization
@inject IJSRuntime JS

<input type="text"
       @bind:get="DisplayValue"
       @bind:set="HandleInput"
       placeholder="R$ 0,00"
       class="form-control" />

@code {
    private decimal _value;
    private string _displayValue = string.Empty;

    [Parameter]
    public decimal Value
    {
        get => _value;
        set
        {
            if (_value != value)
            {
                _value = value;
                _displayValue = _value.ToString("C2", new CultureInfo("pt-BR"));
                ValueChanged.InvokeAsync(value);
            }
        }
    }

    [Parameter]
    public EventCallback<decimal> ValueChanged { get; set; }

    // Propriedade para exibição, formatada para o usuário
    private string DisplayValue
    {
        get => _displayValue;
        set => _displayValue = value;
    }

    private void HandleInput(string newValue)
    {
        // Remove tudo que não for dígito ou vírgula/ponto para tentar converter
        var cleanedValue = newValue.Replace("R$", "").Replace(" ", "").Trim();

        if (decimal.TryParse(cleanedValue, NumberStyles.Currency, new CultureInfo("pt-BR"), out decimal parsedValue))
        {
            _value = parsedValue;
            _displayValue = _value.ToString("C2", new CultureInfo("pt-BR")); // Reformatar para exibição padrão
        }
        else
        {
            // Se a conversão falhar (ex: "abc"), mantemos o último valor válido ou limpamos
            // Dependendo do comportamento desejado, você pode:
            // _displayValue = newValue; // Manter o texto digitado (pode ser útil para feedback de erro)
            // Ou simplesmente não alterar o _value e _displayValue se a conversão falhou.
            // Para este exemplo, apenas atualizamos a exibição sem alterar o valor numérico
            // se a entrada for inválida para uma conversão imediata.
            _displayValue = newValue; // Mantém o que o usuário digitou (pode exibir um valor inválido temporariamente)
        }

        // Isso é importante para notificar o componente pai sobre a mudança
        ValueChanged.InvokeAsync(_value);
    }

    protected override void OnInitialized()
    {
        // Inicializa a exibição com o valor inicial formatado
        _displayValue = Value.ToString("C2", new CultureInfo("pt-BR"));
    }
}