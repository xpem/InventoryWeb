@page "/XpemInventory/category/list"
@using System.Security.Claims
@using InventoryWeb.Infra
@using InventoryWeb.Infra.Services
@using Models.Resps
@using Models.UIRequests
@using Services
@inject ICategoryService categoryService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject CustomAuthenticationService customAuthenticationService

<style>
	.table td {
		vertical-align: middle;
	}

	.table {
		width: fit-content;
		min-width: 300px;
	}

		.table tr {
			cursor: pointer; /* Muda o cursor para indicar que é clicável */
		}

			.table tr:hover {
				background-color: #e0e0e0; /* Muda a cor de fundo ao passar o mouse */
			}

</style>

@if (categories.Count == 0 && !ReadOnlyMode)
{
	<p>Nenhuma categoria encontrada.</p>
}
else if (ReadOnlyMode)
{
	<p>Carregando...</p>
}
else
{
	<div class="row">
		<a href="/XpemInventory/category/edit" class="btn btn-primary" style="margin-bottom: 10px; width: fit-content;"><i class="fa-solid fa-plus"></i></a>
	</div>
	<div class="row">
		<table class="table">
			<tbody>
				@foreach (var cat in categories)
				{
					<tr @onclick='() => Navigation.NavigateTo("/XpemInventory/category/display?x=" + cat.Id)'>
						<td>
							<div class="category-circle" style="background: @cat.Color"></div>
						</td>
						<td>@cat.Name</td>
					</tr>
				}
			</tbody>
		</table>
	</div>

}


@code {
	private string? userToken;

	List<UICategory> categories = new List<UICategory>();

	[Parameter] public bool ReadOnlyMode { get; set; }

	// UICategory selectedUICategory;

	protected override async Task OnInitializedAsync()
	{
		ReadOnlyMode = true;
		try
		{
			// Obtém o estado de autenticação atual
			var authState = await AuthStateProvider.GetAuthenticationStateAsync();
			var user = authState.User; // O ClaimsPrincipal do usuário

			// Verifica se o usuário está autenticado
			if (user.Identity?.IsAuthenticated == true)
			{
				// Recupera o nome de usuário (geralmente do ClaimTypes.Name)
				// userEmail = user.Identity.Name;
				// Ou você pode usar uma claim específica, se necessário
				userToken = user.FindFirst("Token")?.Value;

				// Verifica se o usuário pertence a um papel
				// isAdmin = user.IsInRole("Admin");

				// Você pode acessar outras claims assim:
				// var userEmail = user.FindFirst(ClaimTypes.Email)?.Value;
				// var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

				List<Models.DTO.CategoryDTO> list = [];
				ServResp resp = await categoryService.GetCategoriesAsync(userToken);

				if (resp is not null && resp.Success)
				{
					list = resp.Content as List<Models.DTO.CategoryDTO>;

					if (list != null && list.Count > 0)
						foreach (var i in list)
						{
							categories.Add(new UICategory() { Id = i.Id.Value, Name = i.Name, Color = i.Color });
						}
				}
				else if (resp.Error is ErrorTypes.TokenExpired or ErrorTypes.Unauthorized)
				{
					await customAuthenticationService.Logout();
					Navigation.NavigateTo("/XpemInventory/signin", forceLoad: true);

				}
			}
			else
			{
				Navigation.NavigateTo("/XpemInventory/home");
				// userName = "Visitante"; // Ou qualquer lógica para usuário não logado
				// isAdmin = false;
			}
		}
		catch (Exception ex) { throw ex; }

		ReadOnlyMode = false;
	}
}
