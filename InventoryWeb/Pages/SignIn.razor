@page "/signin"
@using InventoryWeb.Infra
@using InventoryWeb.Infra.Services
@using Models
@using Models.UIRequests
@using Services
@using System.Security.Claims
@inject HttpClient Http
@inject IUserService userService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject ToastService ToastService
@inject CustomAuthenticationService customAuthenticationService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Cadastrar usuário</PageTitle>

<div class="main-layout">
    <div class="col-lg-12" style="display: flex; justify-content: center; margin-bottom: 30px; margin-top: 30px;">
        <i class="fa-solid fa-clipboard-list" style="color: white; font-size: 70px;"></i>
    </div>

    <div class="col-lg-12" style="display: flex; justify-content:center; flex-wrap: wrap; align-content: center; width: 100%;">
        <EditForm Model="_UIUserSignIn" OnValidSubmit="SignInCommand" style="min-width:400px;">
            <DataAnnotationsValidator />

            <div class="row mb-3">
                <div class="form-group">
                    <label for="inputEmail">Email</label>
                    <InputText type="email" class="form-control" id="inputEmail" @bind-Value="@_UIUserSignIn.Email" disabled=@ReadOnlyMode />
                    <ValidationMessage For="@(() => _UIUserSignIn.Email)" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="form-group">
                    <label for="inputPassword">Senha</label>
                    <InputText type="password" class="form-control" id="inputPassword" @bind-Value="@_UIUserSignIn.Password" disabled=@ReadOnlyMode />
                    <ValidationMessage For="@(() => _UIUserSignIn.Password)" />
                </div>
            </div>
            <div class="d-grid gap">
                <button type="submit" class="btn btn-primary" disabled=@ReadOnlyMode><i class="fa-solid fa-arrow-right-to-bracket"></i>&nbsp;&nbsp;@BtnSignInText</button>
            </div>

            <div class="col-lg-12" style="margin-top: 20px">Não tem conta? <a href="/signup">Criar Conta</a></div>
            <div class="col-lg-12" style="margin-top: 5px; margin-bottom: 20px;">Esqueceu sua Senha? <a href="/updatepassword">Atualizar Senha</a></div>

        </EditForm>
    </div>

</div>

@code {

    [Parameter] public UIUserSignIn _UIUserSignIn { get; set; } = new UIUserSignIn() { Email = string.Empty, Password = string.Empty };

    [Parameter] public bool ReadOnlyMode { get; set; }

    [Parameter] public string BtnSignInText { get; set; } = "Acessar";

    private ClaimsPrincipal? usuario;

    protected override async Task OnInitializedAsync()
    {
        // Obtém o estado de autenticação atual
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User; // O ClaimsPrincipal do usuário

        // Verifica se o usuário está autenticado
        if (user.Identity?.IsAuthenticated == true)
        {
                    Navigation.NavigateTo("/");            
        }
    }

    private async Task SignInCommand()
    {
        ReadOnlyMode = true;

        try
        {
            BtnSignInText = "Acessando...";

            Models.Resps.ServResp resp = await userService.SignIn(_UIUserSignIn.Email, _UIUserSignIn.Password);

            if (resp.Success)
            {
                if (resp.Content is not null and User _user)
                {
                    await customAuthenticationService.Login(_user);

                }
                NavigationManager.NavigateTo("/");

            }
            else
            {
                string errorMessage = resp.Error == Models.Resps.ErrorTypes.WrongEmailOrPassword
                    ? "Email/senha incorretos"
                    : resp.Error == Models.Resps.ErrorTypes.ServerUnavaliable
                    ? "Servidor indisponível, favor entrar em contato com o desenvolvedor."
                    : "Erro não mapeado, favor entrar em contato com o desenvolvedor.";

                ToastService.ShowToast(new ToastComponent(errorMessage, "text-bg-danger"));
            }

            BtnSignInText = "Acessar";

        }
        catch (Exception ex)
        {
            throw;
        }

        ReadOnlyMode = false;
    }

}

@* 
    // Código comentado para logout, caso necessário no futuro.
    // Este código pode ser usado para implementar a funcionalidade de logout
    // em uma página ou componente separado, se necessário.
                             [Inject]
    private NavigationManager Navigation { get; set; }

    [Inject]
    private CustomAuthenticationService AuthService { get; set; }

    [Inject]
    private CustomAuthStateProvider AuthStateProvider { get; set; }

    private async Task Logout()
    {
        await AuthService.Logout();
        AuthStateProvider.NotifyUserLogout(); // Garante que o estado seja limpo imediatamente
        Navigation.NavigateTo("/", forceLoad: true); // Redireciona para a página inicial
    } *@