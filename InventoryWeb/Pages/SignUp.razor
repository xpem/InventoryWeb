@page "/signup"
@using InventoryWeb.Components
@using InventoryWeb.Infra.Services
@using Models.UIRequests
@using Services
@inject HttpClient Http
@inject IUserService userService
@inject IJSRuntime JS
@inject ToastService ToastService
@inject NavigationManager NavigationManager

<PageTitle>Cadastrar usuário</PageTitle>
<div style="display: flex; justify-content:center; flex-wrap: wrap; align-content: center; height: 100%; width:100%;">
    <div style="display: flex; justify-content: center; flex-direction:column; width:100%;">
        <div class="col-lg-12" style="display: flex; justify-content: center; margin-bottom: 30px; margin-top: 30px;">
            <i class="fa-solid fa-user" style="color: white; font-size: 70px;"></i>
        </div>

        <div class="col-lg-12" style="display: flex; justify-content:center; flex-wrap: wrap; align-content: center; width: 100%;">
            <EditForm Model="_UIUserSignUp" OnValidSubmit="SignUpCommand" style="min-width:400px;">
                <DataAnnotationsValidator />

                <div class="row mb-3">
                    <div class="form-group">
                        <label for="inputName">Nome</label>
                        <InputText type="text" class="form-control" id="inputName" @bind-Value="@_UIUserSignUp.Name" />
                        <ValidationMessage For="@(() => _UIUserSignUp.Name)" />
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="form-group">
                        <label for="inputEmail">Email</label>
                        <InputText type="email" class="form-control" id="inputEmail" @bind-Value="@_UIUserSignUp.Email" />
                        <ValidationMessage For="@(() => _UIUserSignUp.Email)" />
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="form-group">
                        <label for="inputPassword">Senha</label>
                        <InputText type="password" class="form-control" id="inputPassword" @bind-Value="@_UIUserSignUp.Password" />
                        <ValidationMessage For="@(() => _UIUserSignUp.Password)" />
                    </div>
                </div>

                <div class="row mb-3">
                    <div class="form-group">
                        <label for="inputConfirmPassword">Confirme a Senha</label>
                        <InputText type="password" class="form-control" id="inputConfirmPassword" @bind-Value="@_UIUserSignUp.ConfirmPassword" />
                        <ValidationMessage For="@(() => _UIUserSignUp.ConfirmPassword)" />
                    </div>
                </div>

                <div class="d-grid" disabled=@BtnSignInEnabled>
                    <button type="submit" class="btn btn-primary"><i class="fa-solid fa-user-plus"></i>&nbsp;&nbsp;Acessar</button>
                </div>

@*                 @if (AlertVisible)
                {
                    <div class="alert alert-info alert-dismissible fade show" style="margin-top: 20px;" role="alert">
                        @AlertMessage
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" @onclick="() => AlertVisible = false"></button>
                    </div>
                } *@
                <div class="col-lg-12" style="margin-top: 20px"><a href="/signin"><i class="fa-solid fa-arrow-left"></i>&nbsp;&nbsp;Voltar</a></div>

                @*                 <button type="button" class="btn btn-primary" @onclick="ShowToast">Show live toast</button> *@
            </EditForm>
        </div>
    </div>
</div>
@code {
    private UIUserSignUp _UIUserSignUp { get; set; } = new UIUserSignUp() { Name = string.Empty, ConfirmPassword = string.Empty, Email = string.Empty, Password = string.Empty };

    private bool AlertVisible { get; set; } = false;

    private bool BtnSignInEnabled { get; set; } = true;

    public async Task SignUpCommand()
    {
        try{
            BtnSignInEnabled = false;

            //
            Models.Resps.ServResp resp = await userService.AddUser(_UIUserSignUp.Name, _UIUserSignUp.Email, _UIUserSignUp.Password);

            if (!resp.Success)
            {
                ToastService.ShowToast(new ToastComponent($"Não foi possível cadastrar o usuário!", "text-bg-danger"));
            }
            else
            {
                ToastService.ShowToast(new ToastComponent($"Usuário Cadastrado!", "text-bg-success"));

                NavigationManager.NavigateTo("/signin");
            }
        }catch(Exception ex){ throw ex; }
    }
}
