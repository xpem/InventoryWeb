@page "/signup"
@using InventoryWeb.Components
@using InventoryWeb.Infra.Services
@using Models.UIRequests
@using Services
@inject HttpClient Http
@inject IUserService userService
@inject IJSRuntime JS
@inject ToastService ToastService
@inject NavigationManager NavigationManager

<PageTitle>Cadastrar usuário</PageTitle>

<div class="d-flex justify-content-center" style="margin-bottom: 30px; margin-top: 30px;">
	<i class="fa-solid fa-user" style="color: white; font-size: 70px;"></i>
</div>
<div class="d-flex justify-content-center my-5">
	<EditForm Model="_UIUserSignUp" OnValidSubmit="SignUpCommand" class="col-lg-6 col-12" style="max-width:700px;">
		<DataAnnotationsValidator />

		<div class="row mb-3">
			<div class="form-group">
				<label for="inputName">Nome</label>
				<InputText type="text" class="form-control" id="inputName" @bind-Value="@_UIUserSignUp.Name" />
				<ValidationMessage For="@(() => _UIUserSignUp.Name)" />
			</div>
		</div>

		<div class="row mb-3">
			<div class="form-group">
				<label for="inputEmail">Email</label>
				<InputText type="email" class="form-control" id="inputEmail" @bind-Value="@_UIUserSignUp.Email" />
				<ValidationMessage For="@(() => _UIUserSignUp.Email)" />
			</div>
		</div>
		<div class="row mb-3">
			<div class="form-group">
				<label for="inputPassword">Senha</label>
				<InputText type="password" class="form-control" id="inputPassword" @bind-Value="@_UIUserSignUp.Password" />
				<ValidationMessage For="@(() => _UIUserSignUp.Password)" />
			</div>
		</div>

		<div class="row mb-3">
			<div class="form-group">
				<label for="inputConfirmPassword">Confirme a Senha</label>
				<InputText type="password" class="form-control" id="inputConfirmPassword" @bind-Value="@_UIUserSignUp.ConfirmPassword" />
				<ValidationMessage For="@(() => _UIUserSignUp.ConfirmPassword)" />
			</div>
		</div>

		<div class="d-grid" disabled=@BtnSignInEnabled>
			<button type="submit" class="btn btn-success"><i class="fa-solid fa-user-plus"></i>&nbsp;&nbsp;Acessar</button>
		</div>

		<div class="col-lg-12" style="margin-top: 20px"><a href="/signin"><i class="fa-solid fa-arrow-left"></i>&nbsp;&nbsp;Voltar</a></div>

	</EditForm>
</div>
@code {
	private UIUserSignUp _UIUserSignUp { get; set; } = new UIUserSignUp() { Name = string.Empty, ConfirmPassword = string.Empty, Email = string.Empty, Password = string.Empty };

	private bool AlertVisible { get; set; } = false;

	private bool BtnSignInEnabled { get; set; } = true;

	public async Task SignUpCommand()
	{
		try
		{
			BtnSignInEnabled = false;

			//
			Models.Resps.ServResp resp = await userService.AddUser(_UIUserSignUp.Name, _UIUserSignUp.Email, _UIUserSignUp.Password);

			if (!resp.Success)
			{
				if (resp.Content?.ToString() == "User Email already exists.")
				{
					ToastService.ShowToast(new ToastComponent($"Email já cadastrado!", "text-bg-danger"));
				}
				else
				{
					ToastService.ShowToast(new ToastComponent($"Não foi possível cadastrar o usuário!", "text-bg-danger"));
				}
			}
			else
			{
				ToastService.ShowToast(new ToastComponent($"Usuário Cadastrado!", "text-bg-success"));

				NavigationManager.NavigateTo("/signin");
			}
		}
		catch (Exception ex) { throw; }
	}
}
