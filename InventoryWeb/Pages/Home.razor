@page "/XpemInventory/Home"

@using System.Security.Claims
@using InventoryWeb.Infra.Services
@using InventoryWeb.Utils
@using Models
@using Models.Item
@using Models.Item.Files
@using Services
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IItemService itemService
@inject IItemSituationService itemSituationService
@inject IJSRuntime JSRuntime
@inject NavMenuService NavMenuService
@inject CustomAuthenticationService customAuthenticationService

<PageTitle>Principal</PageTitle>

<div class="col-12 row">
	<div class="col-lg-9 col-sm-12 mb-4">
		<button type="button" class="btn btn-success mr-3" @onclick='() => Navigation.NavigateTo("/XpemInventory/item/edit")'><i class="fa-solid fa-plus"></i>&nbsp;&nbsp;Adicionar Item</button>
	</div>
	<div class="col-3 mb-4 d-flex justify-content-end">
		@if (searchPanelIsVisible)
		{
			<a @onclick='() => TogleSearchPanel()' class="btn btn-outline-danger mb-3" style="margin-bottom: 10px; width: fit-content; height: fit-content"><i class="fa-solid fa-filter-circle-xmark"></i></a>
		}
		else
		{
			<a @onclick='() => TogleSearchPanel()' class="btn btn-outline-light mb-3" style="margin-bottom: 10px; width: fit-content; height: fit-content"><i class="fa-solid fa-filter"></i></a>
		}
	</div>

	@if (searchPanelIsVisible)
	{
		<div class="row g-2 mb-4">
			<div class="col-lg-12">
				@foreach (var situation in ItemsSituationObsList)
				{
					<button type="button" class="btn btn-primary" @onclick='() => SetSelectedItemSituation(situation.Id.Value)'>
						@situation.Name <span class="badge text-bg-secondary">4</span>
					</button>
				@* 	<span class="badge rounded-pill mb-3" style="background-color:@situation.BackgoundColor; color: white; font-size: 14px; width: 110px; margin: 5px; padding: 6px;"
						  @onclick='() => SetSelectedItemSituation(situation.Id.Value)'>@situation.Name</span> *@
				}
			</div>
			<div class="col-lg-6">
				<InputText type="text" class="form-control" id="inputName" @bind-Value="@searchText" placeholder="Nome do Item" />
			</div>
			<div class="col-auto">
				<a class="btn btn-primary" @onclick='() => LoadItemsBySearch()'><i class="fa-solid fa-magnifying-glass"></i></a>
			</div>
		</div>
	}
</div>
@if (items is not null && items?.Count > 0)
{
	<div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
		@foreach (var item in items)
		{
			<div class="col">
				<div class="card h-100 linked-card card-custom" @onclick='() => Navigation.NavigateTo("/XpemInventory/item/edit?x=" + item.Id)'>
					@* 		<div class="card-header">
						@item.Name
					</div> *@
					<div class="card-body">
						<div class="card-title">
							<p class="fw-bold">@item.Name</p>
						</div>
						<div class="d-flex mb-2">
							<div class="category-circle-md" style="background: @item.Category.Color;">
								<i class="fa-solid fa-@item.SubCategoryIcon" style="font-size: 20px;"></i>
							</div>
							<div style="width: 90%">
								<p class="card-subtitle mb-1 text-body-secondary" style="  font-size: 0.75rem;">@item.CategoryAndSubCategory</p>
								<p class="mb-0 status-badge">@item.Situation.Name</p>
								<div class="d-flex justify-content-between">
									<p class="card-text text-end mb-0 text-body-secondary">@string.Format("{0:dd/MM/yyyy}", @item.AcquisitionDate)</p>
									<p class="card-text text-end mb-0" style="color: var(--primary-green); font-weight: 600;">@string.Format("{0:C}", @item.PurchaseValue)</p>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		}
	</div>
}
else if (!LoadingList && items?.Count == 0)
{
	<div class="col-lg-12 text-center my-3">
		<p>Não há items nesta condição!</p>
	</div>
}

@if (LoadingList)
{
	<div class="col-lg-12">
		<div class="spinner-border text-primary" role="status">
			<span class="visually-hidden">Loading...</span>
		</div>
	</div>
}

@if (items?.Count > 0 && !LoadingList && CurrentPage < TotalPages)
{
	<div class="col-lg-12 text-center my-3">
		<p>Rolando para carregar mais itens...</p>
	</div>
}


@code {

	private string? userEmail;
	private string? userToken;
	private string? searchText;
	private int CurrentPage = 1;
	private bool searchPanelIsVisible = false;
	private List<Models.DTO.ItemDTO> items = new List<Models.DTO.ItemDTO>();
	List<UIItemSituation> ItemsSituationObsList = new List<UIItemSituation>();
	private List<int> SelectedSituationIds = []; // Situação "Em Uso" padrão
	bool LoadingList = true;
	int TotalPages = 0;
	private CancellationTokenSource? _setSituationCts;

	private DotNetObjectReference<Home>? objRef;
	private bool isLoadingMore = false;

	protected async Task TogleSearchPanel()
	{
		if (searchPanelIsVisible)
		{
			searchPanelIsVisible = false;
			searchText = "";
			SelectedSituationIds = [];
			LoadItemsBySearch(true);

		}
		else
		{
			searchPanelIsVisible = true;
			await SetItemSituation();
		}
	}

	protected override async Task OnInitializedAsync()
	{
		objRef = DotNetObjectReference.Create(this);
		var authState = await AuthStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		if (user.Identity?.IsAuthenticated == true)
		{
			userEmail = user.FindFirst(ClaimTypes.Email)?.Value;
			userToken = user.FindFirst("Token")?.Value;

			await LoadItems();

		}
		else
		{
			Navigation.NavigateTo("/XpemInventory/SignIn");
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await JSRuntime.InvokeVoidAsync("setupInfiniteScroll", objRef, "loadMoreItems");
		}
	}

	async void LoadItemsBySearch(bool reset = false)
	{
		ItemSearchParams? itemSearchParams = null;

		if (!string.IsNullOrEmpty(searchText) || (SelectedSituationIds is not null && SelectedSituationIds.Count > 0))
			itemSearchParams = new ItemSearchParams(searchText, SelectedSituationIds?.ToArray(), null);

		if (itemSearchParams is not null)
		{
			var totals = await itemService.GetItemsTotalPages(userToken, itemSearchParams);

			if (totals is not null && totals.Success)
			{
				var _totals = totals.Content as ItemTotals;
				if (_totals is not null)
				{
					TotalPages = _totals.TotalPages;
				}
			}

			if (TotalPages > 0)
			{
				await GetItemsList(CurrentPage, itemSearchParams);
			}
			else items = null;

			await InvokeAsync(StateHasChanged);
		}
		//não carregar novamente caso ele repita a ação de resetar o filtro
		else if (reset)
		{
			LoadItems();
			return;
		}
	}

	async Task LoadItems()
	{
		try
		{
			var totals = await itemService.GetItemsTotalPages(userToken);

			if (totals is not null && totals.Success)
			{
				var _totals = totals.Content as ItemTotals;
				if (_totals is not null)
				{
					TotalPages = _totals.TotalPages;
				}

				if (TotalPages > 0)
				{
					await GetItemsList(CurrentPage);
				}
				else
				{
					items = new();
				}
			}
			else if (totals?.Error == Models.Resps.ErrorTypes.TokenExpired)
			{
				await customAuthenticationService.Logout();
				Navigation.NavigateTo("/XpemInventory/SignIn");
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Erro ao obter itens: {ex.Message}");
		}
	}

	[JSInvokable("loadMoreItems")]
	public async Task LoadMoreItems()
	{
		if (LoadingList || isLoadingMore || CurrentPage >= TotalPages)
		{
			return;
		}

		isLoadingMore = true;
		CurrentPage++;

		await GetItemsList(CurrentPage);
		isLoadingMore = false;
	}

	async Task GetItemsList(int page, ItemSearchParams? itemSearchParams = null)
	{
		LoadingList = true;
		var newItems = await itemService.GetItemsPaginatedAsync(userToken, page, itemSearchParams);

		foreach (var itemDTO in newItems)
		{
			itemDTO.CategoryAndSubCategory = itemDTO.Category.Name;

			if (itemDTO.Category?.SubCategory?.Name is not null)
			{
				itemDTO.CategoryAndSubCategory += "/" + itemDTO.Category.SubCategory.Name;
			}

			if (itemDTO.Category?.SubCategory?.IconName is not null)
				itemDTO.SubCategoryIcon = SubCategoryIconsList.GetIconFaName(itemDTO.Category.SubCategory.IconName);
			else
				itemDTO.SubCategoryIcon = "tag";
		}

		if (page == 1)
		{
			items = newItems;
		}
		else
		{
			if (items is not null && newItems is not null)
				items.AddRange(newItems);
		}

		LoadingList = false;
		await InvokeAsync(StateHasChanged);
	}

	string GetImageSrc(string fileName, int itemId)
	{
		var imageFile = itemService.GetItemImages(itemId, fileName, userToken).Result;

		if (imageFile?.ImageBytes is null) return null;
		string base64 = Convert.ToBase64String(imageFile.ImageBytes);
		return $"data:image/png;base64,{base64}";
	}

	async Task SetSelectedItemSituation(int situationid)
	{
		// Cancela a execução anterior, se houver
		_setSituationCts?.Cancel();
		_setSituationCts = new CancellationTokenSource();
		var token = _setSituationCts.Token;

		if (SelectedSituationIds.Contains(situationid))
		{
			ItemsSituationObsList.Where(x => x.Id == situationid).First().BackgoundColor = "#919191";


			SelectedSituationIds.Remove(situationid);
		}
		else
		{
			SelectedSituationIds.Add(situationid);
			ItemsSituationObsList.Where(x => x.Id == situationid).First().BackgoundColor = "#29A0B1";
		}
	}

	async Task SetItemSituation()
	{
		List<ItemSituation> itemSituationList = [];

		var respItemSituation = await itemSituationService.GetItemSituation(userToken);

		if (respItemSituation is not null && respItemSituation.Success)
			itemSituationList = respItemSituation.Content as List<ItemSituation>;

		if (itemSituationList is not null && itemSituationList.Count > 0)
		{

			ItemsSituationObsList = [];
			string textSituationItem;
			string backgoundColor;

			for (int i = 0; i < itemSituationList.Count; i++)
			{
				// backgoundColor = itemSituationList[i].Sequence is 1 ? "#29A0B1" : "#919191";
				backgoundColor = "#919191";

				textSituationItem = $"{itemSituationList[i].Name}";

				ItemsSituationObsList.Add(new UIItemSituation() { Id = itemSituationList[i].Id.Value, Name = textSituationItem, BackgoundColor = backgoundColor });
			}
		}
	}
}