@page "/"
@using System.Security.Claims
@using Models.Item.Files
@using Services
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IItemService itemService

<PageTitle>Principal</PageTitle>

<style>
        .linked-card {
            transition: filter 0.2s;
        }
        .linked-card:hover {
            cursor: pointer;
            filter: brightness(1.08);
        }
</style>

<div class="col-lg-12" style="margin-bottom: 10px; margin-top:20px;">
    <button type="button" class="btn btn-primary" @onclick='() => Navigation.NavigateTo("/item/edit")'><i class="fa-solid fa-plus"></i>&nbsp;&nbsp;Adicionar Item</button>
    <div style="display: flex; flex-direction: row; flex-wrap: wrap;" >
        @foreach (var item in items)
        {
            <div class="card mb-3 linked-card" style="width: 500px; margin: 10px;" @onclick='() => Navigation.NavigateTo("/item/edit?x=" + item.Id)'>
                <div class="row">
                    <div class="col-md-4" style="display: flex; align-items: center; justify-content: center;">

                        @if (item.IsImage1Base64)
                        {
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        }
                        else if (item.Image1Base64 is not null)
                        {
                            <img src="@item.Image1Base64" class="img-fluid rounded-start" alt="Item Image">
                        }
                        else
                        {
                            <img src="images/box-image.png" class="img-fluid rounded-start" alt="Item Image">
                        }
                    </div>
                    <div class="col-md-8">
                        <div class="card-body">
                            <h5 class="card-title">@item.Name</h5>
                            <h6 class="card-subtitle mb-2 text-body-secondary">@item.CategoryAndSubCategory</h6>
                            @*     <p class="card-text">longer.</p>
                            <p class="card-text"><small class="text-body-secondary">Last updated 3 mins ago</small></p> *@
                        </div>
                    </div>
                </div>
            </div>
        }

    </div>
</div>

@code {
    private string? userEmail;
    private string? userToken;

    List<Models.DTO.ItemDTO> items = new List<Models.DTO.ItemDTO>();

    protected override async Task OnInitializedAsync()
    {
        // Obtém o estado de autenticação atual
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User; // O ClaimsPrincipal do usuário

        // Verifica se o usuário está autenticado
        if (user.Identity?.IsAuthenticated == true)
        {
            // Recupera o nome de usuário (geralmente do ClaimTypes.Name)
            // userEmail = user.Identity.Name;
            // Ou você pode usar uma claim específica, se necessário
            userEmail = user.FindFirst(ClaimTypes.Email)?.Value;
            userToken = user.FindFirst("Token")?.Value;

            try
            {
                items = await itemService.GetItemsAllAsync(userToken);
                string image1Base64;

                foreach (var itemDTO in items)
                {
                    if (!string.IsNullOrEmpty(itemDTO.Image1) && itemDTO.Id.HasValue)
                    {
                        try
                        {
                            var imageFile = await itemService.GetItemImages(itemDTO.Id.Value, itemDTO.Image1, userToken);
                            if (imageFile?.ImageBytes is not null)
                            {
                                string base64 = Convert.ToBase64String(imageFile.ImageBytes);
                                itemDTO.Image1Base64 = $"data:image/png;base64,{base64}";
                            }
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Erro ao carregar imagem para o item {itemDTO.Id}: {ex.Message}");
                            // Opcional: tratar o erro, por exemplo, mantendo o placeholder
                        }
                    }

                    itemDTO.CategoryAndSubCategory = itemDTO.Category.Name;

                    if (itemDTO.Category?.SubCategory?.Name is not null)
                    {
                        itemDTO.CategoryAndSubCategory += "/" + itemDTO.Category.SubCategory.Name;
                    }

                    // Marca o carregamento como concluído para este item
                    itemDTO.IsImage1Base64 = false;

                    // Notifica o Blazor de que o estado do componente mudou
                    await InvokeAsync(StateHasChanged);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao obter itens: {ex.Message}");
            }
            // Verifica se o usuário pertence a um papel
            // isAdmin = user.IsInRole("Admin");

            // Você pode acessar outras claims assim:
            // var userEmail = user.FindFirst(ClaimTypes.Email)?.Value;
            // var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }
        else
        {
            Navigation.NavigateTo("/signin");
            // userName = "Visitante"; // Ou qualquer lógica para usuário não logado
            // isAdmin = false;
        }
    }

    string GetImageSrc(string fileName, int itemId)
    {
        var imageFile = itemService.GetItemImages(itemId, fileName, userToken).Result;

        if (imageFile?.ImageBytes is null) return null;
        string base64 = Convert.ToBase64String(imageFile.ImageBytes);
        return $"data:image/png;base64,{base64}";
    }
}