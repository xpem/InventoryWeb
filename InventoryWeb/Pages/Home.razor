@page "/"
@using System.Security.Claims
@using InventoryWeb.Utils
@using Models
@using Models.Item
@using Models.Item.Files
@using Services
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IItemService itemService
@inject IItemSituationService itemSituationService

<PageTitle>Principal</PageTitle>

<style>
    .linked-card {
        transition: filter 0.2s;
    }

        .linked-card:hover {
            cursor: pointer;
            filter: brightness(1.08);
        }

    .category-circle-md {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: #29A0B1;
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 5px;
        margin-right: 5px;
    }
</style>

<div class="col-lg-12" style="margin-bottom: 10px; margin-top:20px;">
    <button type="button" class="btn btn-primary mb-3" @onclick='() => Navigation.NavigateTo("/item/edit")'><i class="fa-solid fa-plus"></i>&nbsp;&nbsp;Adicionar Item</button>
</div>
<div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
    @foreach (var item in items)
    {
        <div class="col">
            <div class="card h-100 linked-card" @onclick='() => Navigation.NavigateTo("/item/edit?x=" + item.Id)'>
                <div class="card-header">
                    @item.Name
                </div>
                <div class="card-body">
                    <div class="d-flex align-items-center mb-2">
                        <div class="category-circle-md me-2" style="background: @item.Category.Color">
                            <i class="fa-solid fa-@item.SubCategoryIcon" style="font-size: 20px;"></i>
                        </div>
                        <div>
                            <p class="card-subtitle mb-1 text-body-secondary">@item.CategoryAndSubCategory</p>
                            <p class="card-text mb-0">@item.Situation.Name</p>
                            <p class="card-text mb-0">@string.Format("{0:C}", @item.PurchaseValue)</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
@if (LoadingList)
{
    <div class="col-lg-12">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}


@code {
    private string? userEmail;
    private string? userToken;
    // private List<int> SelectetSituationIds = [1]; // Situação "Em Uso" padrão

    List<Models.DTO.ItemDTO> items = new List<Models.DTO.ItemDTO>();

    List<UIItemSituation> ItemsSituationObsList = new List<UIItemSituation>();

    bool LoadingList = true;
    int TotalPages = 0;

    private CancellationTokenSource? _setSituationCts;

    protected override async Task OnInitializedAsync()
    {
        // Obtém o estado de autenticação atual
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User; // O ClaimsPrincipal do usuário

        // Verifica se o usuário está autenticado
        if (user.Identity?.IsAuthenticated == true)
        {
            // Recupera o nome de usuário (geralmente do ClaimTypes.Name)
            // userEmail = user.Identity.Name;
            // Ou você pode usar uma claim específica, se necessário
            userEmail = user.FindFirst(ClaimTypes.Email)?.Value;
            userToken = user.FindFirst("Token")?.Value;

            try
            {
                // await SetItemSituation();

                var totals = await itemService.GetItemsTotalPages(userToken, null);

                if (totals is not null && totals.Success)
                {
                    var _totals = totals.Content as ItemTotals;

                    if (_totals is not null)
                    {
                        TotalPages = _totals.TotalPages;
                    }
                }

                if (TotalPages > 0)
                {
                    _ = GetItemsList(TotalPages);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao obter itens: {ex.Message}");
            }
            // Verifica se o usuário pertence a um papel
            // isAdmin = user.IsInRole("Admin");

            // Você pode acessar outras claims assim:
            // var userEmail = user.FindFirst(ClaimTypes.Email)?.Value;
            // var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }
        else
        {
            Navigation.NavigateTo("/signin");
            // userName = "Visitante"; // Ou qualquer lógica para usuário não logado
            // isAdmin = false;
        }
    }

    async Task GetItemsList(int page)
    {
        LoadingList = true;

        items = await itemService.GetItemsPaginatedAsync(userToken, null, page);

        foreach (var itemDTO in items)
        {
            itemDTO.CategoryAndSubCategory = itemDTO.Category.Name;

            if (itemDTO.Category?.SubCategory?.Name is not null)
            {
                itemDTO.CategoryAndSubCategory += "/" + itemDTO.Category.SubCategory.Name;
            }

            if (itemDTO.Category?.SubCategory?.IconName is not null)
                itemDTO.SubCategoryIcon = SubCategoryIconsList.GetIconFaName(itemDTO.Category.SubCategory.IconName);
            else
                itemDTO.SubCategoryIcon = "tag"; // Ícone padrão se não houver ícone definido
        }

        LoadingList = false;

        await InvokeAsync(StateHasChanged);
    }

    string GetImageSrc(string fileName, int itemId)
    {
        var imageFile = itemService.GetItemImages(itemId, fileName, userToken).Result;

        if (imageFile?.ImageBytes is null) return null;
        string base64 = Convert.ToBase64String(imageFile.ImageBytes);
        return $"data:image/png;base64,{base64}";
    }
}