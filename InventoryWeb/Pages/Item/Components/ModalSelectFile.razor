<div class="modal fade" data-bs-backdrop="static" data-bs-keyboard="false" id="ModalSelectFile" tabindex="-1" aria-labelledby="ModalSelectFile" aria-hidden="true">
	<div class="modal-dialog modal-dialog-scrollable">
		<div class="modal-content">
			<div class="modal-header" style="background-color: var(--bs-primary-bg-subtle); color: #fff ">
				<h1 class="modal-title fs-5">Seleção de arquivo</h1>
			</div>
			<div class="modal-body">
				@if (!IsFileTaked)
				{
					<div class="mb-3">
						<InputFile id="fileInput" class="form-control" OnChange="HandleFileSelection" accept="image/*" />
					</div>
				}

				@if (!string.IsNullOrEmpty(TempImageDataUrl))
				{
					<div class="d-flex justify-content-center mb-3">
						<img src="@TempImageDataUrl" class="img-fluid"
							 style="max-width: 400px; height: auto; border: 1px solid #ccc;" />
					</div>
					<div class="d-flex justify-content-center flex-wrap gap-2">
						<button class="btn btn-info" @onclick="ClearFile">
							<i class="fas fa-trash"></i> Limpar Imagem
						</button>
						<button class="btn btn-success" @onclick="SaveFile" data-bs-dismiss="modal">
							<i class="fas fa-save"></i> Salvar Imagem
						</button>
					</div>
				}

				<canvas id="photoCanvas" style="display: none;"></canvas>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal" style="color: #fff"><i class="bi bi-arrow-left-short"></i> Voltar</button>
			</div>
		</div>
	</div>
</div>
@code {

	private bool IsFileTaked { get; set; }

	private string? TempImageDataUrl { get; set; }

	private IBrowserFile? selectedFile;

	[Parameter]
	public string? ImageDataUrl { get; set; }

	[Parameter]
	public EventCallback<string> ImageDataUrlChanged { get; set; }

	private void ClearFile()
	{
		TempImageDataUrl = null;
		StateHasChanged(); // Força a atualização da UI
		IsFileTaked = false;
	}

	private async Task HandleFileSelection(InputFileChangeEventArgs e)
	{
		// Pega o primeiro arquivo selecionado (pode ser ajustado para múltiplos)
		selectedFile = e.File;
		if (selectedFile != null)
		{
			var format = "image/jpeg";
			var imageBytes = new byte[selectedFile.Size];
			await selectedFile.OpenReadStream().ReadAsync(imageBytes);
			TempImageDataUrl = $"data:{format};base64,{Convert.ToBase64String(imageBytes)}";
		}
	}

	private void SaveFile()
	{
		if (!string.IsNullOrEmpty(TempImageDataUrl))
		{
			IsFileTaked = false;
			ImageDataUrl = TempImageDataUrl;
			TempImageDataUrl = null;
			ImageDataUrlChanged.InvokeAsync(ImageDataUrl);
			StateHasChanged(); // Force UI update if needed
		}
	}
}
