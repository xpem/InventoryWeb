@inject IJSRuntime JS

<div class="modal fade" data-bs-backdrop="static" data-bs-keyboard="false" id="ModalCamera" tabindex="-1" aria-labelledby="ModalCamera" aria-hidden="true">
	<div class="modal-dialog modal-dialog-scrollable">
		<div class="modal-content">
			<div class="modal-header" style="background-color: var(--bs-primary-bg-subtle); color: #fff ">
				<h1 class="modal-title fs-5" id="exampleModalLabel">Captura de imagem</h1>
			</div>
			<div class="modal-body">
				@if (!IsPhotoTaked)
				{
					<div class="d-flex justify-content-center align-items-center mb-3" style="display:flex; flex-direction: column; align-items: center;">
						<video id="videoFeed" autoplay playsinline class="img-fluid"
							   data-bs-dismiss="modal"
							   @onclick="TakePhoto"
							   style="max-width: 400px; border: 1px solid #ccc; background-color: #f0f0f0;"></video>
						<a class="btn btn-success" @onclick="TakePhoto" disabled="@(!IsCameraActive)" style="max-width:400px; width: 100%;" data-bs-dismiss="modal">
							<i class="fas fa-camera"></i> Capturar Foto
						</a>
					</div>
				}

				@if (!string.IsNullOrEmpty(TempImageDataUrl))
				{
					<div class="d-flex justify-content-center mb-3">
						<img src="@TempImageDataUrl" class="img-fluid"
							 style="max-width: 400px; height: auto; border: 1px solid #ccc;" />
					</div>
					<div class="d-flex justify-content-center flex-wrap gap-2">
						<button class="btn btn-info" @onclick="ClearPhoto">
							<i class="fas fa-trash"></i> Limpar Foto
						</button>
						<button class="btn btn-success" @onclick="SavePhoto" data-bs-dismiss="modal">
							<i class="fas fa-save"></i> Salvar Foto
						</button>
					</div>
				}

				<canvas id="photoCanvas" style="display: none;"></canvas>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" @onclick="StopCamera" data-bs-dismiss="modal" style="color: #fff"><i class="bi bi-arrow-left-short"></i> Voltar</button>
			</div>
		</div>
	</div>
</div>

@code {
	
	private bool IsPhotoTaked { get; set; }
		
	private bool IsCameraActive { get; set; }

	private string? TempImageDataUrl { get; set; }

	[Parameter]
	public string? ImageDataUrl { get; set; }

	//para atualizar a variável no pai
	[Parameter]
	public EventCallback<string> ImageDataUrlChanged { get; set; }


	private void ClearPhoto()
	{
		TempImageDataUrl = null;
		StateHasChanged(); // Força a atualização da UI
		IsPhotoTaked = false;
	}

	private async Task StopCamera()
	{
		// Invoca a função JavaScript para parar o feed da câmera
		await JS.InvokeVoidAsync("cameraInterop.stopCameraFeed", "videoFeed");
		IsCameraActive = false;
		ClearPhoto();
		// Força a atualização da UI para refletir o novo estado dos botões
		StateHasChanged();
	}


	private async Task TakePhoto()
	{
		if (IsCameraActive) // Garante que a câmera está ativa antes de tentar capturar
		{
			// Invoca a função JavaScript para capturar a foto do feed de vídeo
			// E recebe a imagem em Base64 de volta
			TempImageDataUrl = await JS.InvokeAsync<string>("cameraInterop.capturePhoto", "videoFeed", "photoCanvas");

			SavePhoto();

			await StopCamera();
			IsPhotoTaked = true;
		}
	}

	private void SavePhoto()
	{
		if (!string.IsNullOrEmpty(TempImageDataUrl))
		{
			IsPhotoTaked = false;
			ImageDataUrl = TempImageDataUrl;
			TempImageDataUrl = null;
			ImageDataUrlChanged.InvokeAsync(ImageDataUrl);
			StateHasChanged(); // Force UI update if needed
		}
	}

	public async Task StartCamera()
	{
		try
		{
			// Invoca a função JavaScript para iniciar o feed da câmera
			await JS.InvokeVoidAsync("cameraInterop.startCameraFeed", "videoFeed");
			IsCameraActive = true;
			TempImageDataUrl = null; // Limpa qualquer foto capturada anteriormente
									 // Força a atualização da UI para refletir o novo estado dos botões
			StateHasChanged();
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Erro ao iniciar câmera: {ex.Message}");
			// Considere exibir uma mensagem de erro amigável ao usuário
		}
	}
}